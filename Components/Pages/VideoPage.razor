@page "/video"
@using RandomVideo.Models
@rendermode InteractiveServer

<PageTitle>Video</PageTitle>

<h1>Video</h1>

<div>
    <button class="btn btn-primary" @onclick="LoadVideos">Load Videos</button>
</div>

<div class="mt-3">
    @if (_videos.Count == 0)
    {
        <p>Loading...</p>
    }
    else if (_videos.Count == 0)
    {
        <p>No videos found.</p>
    }
    else
    {
        <div class="video-grid">
            @foreach (var video in _videos)
            {
                <div class="video-card">
                    <div class="video-title">@video.Name</div>
                    <div class="video-thumbnail">
                        <img src="@video.Thumbnail.FilepathDisplay" @onclick='() => PlayVideo(video)' alt="@video.Name"/>
                    </div>
                </div>
            }
        </div>
    }
</div>

<div class="mt-3">
    @if (!string.IsNullOrEmpty(_currentVideo))
    {
        <video @ref="_videoPlayer" width="640" height="480" controls key="@_currentVideo">
            <source src="@_currentVideo" type="video/mp4">
            Your browser does not support the video tag.
        </video>
    }
</div>

<style>
    .video-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
        gap: 10px;
    }

    .video-card {
        border: 1px solid #ccc;
        border-radius: 8px;
        overflow: hidden;
        text-align: center;
        box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }

    .video-title {
        background-color: #f8f8f8;
        padding: 10px;
        font-size: 16px;
        font-weight: bold;
    }

    .video-thumbnail {
        padding: 10px;
    }

    .video-thumbnail img {
        width: 100%;
        height: auto;
        cursor: pointer;
    }
</style>

@code {
    private List<Video> _videos = [];
    private string _currentVideo = "";
    private ElementReference _videoPlayer;

    [Inject] private HttpClient HttpClient { get; set; }

    [Inject] private IJSRuntime JSRuntime { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await LoadVideos();
    }

    private async Task LoadVideos()
    {
        Console.WriteLine("Chargement des vid√©os");
        var response = await HttpClient.GetFromJsonAsync<List<Video>>("/api/video");
        _videos = response ?? [];
    }

    private async Task PlayVideo(Video video)
    {
        _currentVideo = $"/api/video/{Uri.EscapeDataString(video.Name)}";
        await Task.Delay(50);
        await JSRuntime.InvokeVoidAsync("reloadVideo", _videoPlayer);
    }

}